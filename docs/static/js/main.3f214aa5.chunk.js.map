{"version":3,"sources":["screens/activity/actions.js","store/functions.js","screens/activity/reducer.js","store/rootReducer.js","App.js","serviceWorker.js","index.js","store/index.js"],"names":["__webpack_require__","d","__webpack_exports__","ADD_ACTIVITY","addActivity","ADD_ADDRESS","addAddress","COPY_ADDRESS_FROM_EXISTING_ACTIVITY","actions_copyAddressFromExistingActivity","name","recommendAge","webpage","phone","type","payload","placeName","postcode","buildingUnit","buildingName","streetNumber","streetName","town","copyAddressFromExistingActivity","dispatch","data","status","error","axios","method","url","headers","Accept","then","result","actionType","requestSuccess","requestFaild","initialState","activity","address","addressHistory","activityReducer","state","arguments","length","undefined","action","Object","objectSpread","rootReducer","combineReducers","AddActivity","lazy","e","bind","AddAddress","Home","Activity","ConfirmActivity","App","react_default","a","createElement","react_router_dom","react","fallback","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","store","middlewares","reduxPromise","reduxThunk","storeEnhancers","applyMiddleware","apply","composedEnhancer","composeWithDevTools","createStore","configureStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f214aa5.chunk.js","sourcesContent":["import axios from 'axios';\nimport {requestStart, requestSuccess, requestFaild} from '../../store/functions';\n\nexport const ADD_ACTIVITY = 'ADD_ACTIVITY';\nexport const addActivity = (name, recommendAge, webpage, phone) => {\n    return {\n        type: ADD_ACTIVITY,\n        payload: {\n            name,\n            recommendAge,\n            webpage,\n            phone,\n        }\n    }\n}\n\nexport const ADD_ADDRESS = 'ADD_ADDRESS';\nexport const addAddress = (placeName, postcode, buildingUnit, buildingName, streetNumber, streetName, town) => {\n    return {\n        type: ADD_ADDRESS,\n        payload: {\n            placeName, \n            postcode, \n            buildingUnit, \n            buildingName, \n            streetNumber, \n            streetName, \n            town\n        }\n    }\n}\n\nexport const COPY_ADDRESS_FROM_EXISTING_ACTIVITY = 'COPY_ADDRESS_FROM_EXISTING_ACTIVITY';\nexport const copyAddressFromExistingActivity = () => {\n    return (dispatch) => {\n    \n        dispatch(requestStart(COPY_ADDRESS_FROM_EXISTING_ACTIVITY));\n\n        const request = axios(\n            {\n                method: 'get',\n                url: 'http://stepx.me/addresses.json',\n                headers: {\n                    'Accept': '*/*', \n                }\n            }\n        );\n        \n        return request.then(\n            result => dispatch(requestSuccess(COPY_ADDRESS_FROM_EXISTING_ACTIVITY, result.data)),\n            error => dispatch(requestFaild(COPY_ADDRESS_FROM_EXISTING_ACTIVITY, error))\n        );\n    }\n}","export const requestSuccess = \n    (actionType, result) => {\n        return {\n            type: actionType,\n            payload: {\n                data: result,\n                status: 'success',\n                error: null,\n            }\n        }\n    }\n\nexport const requestStart = (actionType) => \n{\n    return {\n        type: actionType,\n        payload: {\n            data: null,\n            status: 'pendding',\n            error: null,\n        }\n    }\n}\n\nexport const requestFaild = (actionType, error) => {\n    return {\n        type: actionType,\n        payload: {\n            data: null,\n            status: 'faild',\n            error: error,\n        }\n    }\n}","import { ADD_ACTIVITY, ADD_ADDRESS, COPY_ADDRESS_FROM_EXISTING_ACTIVITY } from './actions';\n\n\nconst initialState = {\n    activity: null,\n    address: null,\n    addressHistory: null,\n}\n\nconst activityReducer = (state = initialState, action) => {\n    switch(action.type){\n        case ADD_ACTIVITY: {\n            return {\n                ...state,\n                activity: {\n                    ...action.payload\n                },\n            }\n        }\n        case ADD_ADDRESS: {\n            return {\n                ...state,\n                address: {\n                    ...action.payload\n                },\n            }\n        }\n        case COPY_ADDRESS_FROM_EXISTING_ACTIVITY: {\n            return {\n                ...state,\n                addressHistory: {\n                    ...action.payload\n                }\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport default activityReducer;","import { combineReducers } from 'redux';\nimport activityReducer from '../screens/activity/reducer';\n\nconst rootReducer = combineReducers({\n    activity: activityReducer,\n});\n\nexport default rootReducer;","import React, { Component, Suspense, lazy  } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst AddActivity = lazy(() => import('./screens/activity/AddActivity'));\nconst AddAddress = lazy(() => import('./screens/activity/AddAddress'));\nconst Home = lazy(() => import('./screens/home'));\nconst Activity = lazy(() => import('./screens/activity'));\nconst ConfirmActivity = lazy(() => import('./screens/activity/ConfirmActivity'));\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/activity/id\" component={Activity}/>\n            <Route path=\"/activity/add\" component={AddActivity}/>\n            <Route path=\"/activity/address/add\" component={AddAddress}/>\n            <Route path=\"/activity/confirm\" component={ConfirmActivity}/>\n          </Switch>\n        </Suspense>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"./store\";\n\nimport './assets/sass/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reduxPromise from 'redux-promise';\nimport reduxThunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nexport const configureStore = () => {\n\n  const middlewares = [reduxPromise, reduxThunk];\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n  const storeEnhancers = [middlewareEnhancer];\n  const composedEnhancer  = composeWithDevTools(...storeEnhancers);\n\n  const store = createStore(\n    rootReducer,\n    composedEnhancer,\n  );\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (module.hot) {\n      module.hot.accept('./rootReducer', () => {\n        const newRootReducer = require('./rootReducer').default;\n        store.replaceReducer(newRootReducer)\n      })\n    }\n  }\n\n  return store;\n}"],"sourceRoot":""}